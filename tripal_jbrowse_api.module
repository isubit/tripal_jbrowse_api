<?php

require_once 'includes/tripal_jbrowse_api.queries.inc';

/**
 * Implements hook_permission().
 */
function tripal_jbrowse_api_permission() {
  return array(
    'use jbrowse api' => array(
      'title' => t('Use JBrowse API'),
      'description' => t('Allows the user to access the JBrowse-compatible REST API to the Chado database.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tripal_jbrowse_api_menu() {

  $base = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use jbrowse api'),
    'page callback' => 'tripal_jbrowse_api_router',
    'delivery callback' => 'tripal_jbrowse_api_json_output',
  );

  $items['api/jbrowse/tracks.conf'] = array(
    'page arguments' => array('tripal_jbrowse_api_callback_null'),
  ) + $base;

  $items['api/jbrowse/trackList.json'] = array(
    'page arguments' => array('tripal_jbrowse_api_callback_datasets'),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/refSeqs.json'] = array(
    'page arguments' => array('tripal_jbrowse_api_callback_refseqs', 2),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/stats/global'] = array(
    'page arguments' => array('tripal_jbrowse_api_callback_stats', 2),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/names'] = array(
    'page arguments' => array('tripal_jbrowse_api_callback_names', 2),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/features/%'] = array(
    'page arguments' => array('tripal_jbrowse_api_callback_features', 2, 4),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/tracks.conf'] = array(
    'page arguments' => array('tripal_jbrowse_api_callback_null'),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/trackList.json'] = array(
    'page arguments' => array('tripal_jbrowse_api_callback_tracklist', 2),
  ) + $base;

  return $items;

}

function tripal_jbrowse_api_router() {

  if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {

    if (isset($_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD']) && $_SERVER['HTTP_ACCESS_CONTROL_REQUEST_METHOD'] == 'GET' && isset($_SERVER['HTTP_ORIGIN'])) {
      drupal_add_http_header('Access-Control-Allow-Origin', '*');
      drupal_add_http_header('Access-Control-Allow-Methods', 'GET, OPTIONS');
      drupal_add_http_header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
    }

    return NULL;

  } elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {

    drupal_add_http_header('Access-Control-Allow-Origin', '*');
    drupal_add_http_header('Access-Control-Allow-Methods', 'GET, OPTIONS');
    drupal_add_http_header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');

    $args = func_get_args();
    $page_callback = array_shift($args);

    return call_user_func_array($page_callback, $args);

  } else {

    drupal_add_http_header('Status', '501 Not Implemented');
    return NULL;

  }

}

function tripal_jbrowse_api_json_output($page_callback_result = NULL) {

  drupal_page_is_cacheable(FALSE);

  drupal_add_http_header('Content-Type', 'application/json; charset=UTF-8');

  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    switch ($page_callback_result) {
      case MENU_NOT_FOUND:
        drupal_add_http_header('Status', '404 Not Found');
        break;
      case MENU_ACCESS_DENIED:
        drupal_add_http_header('Status', '403 Forbidden');
        break;
      case MENU_SITE_OFFLINE:
        drupal_add_http_header('Status', '503 Service unavailable');
        break;
    }
  } elseif (isset($page_callback_result)) {
    echo drupal_json_encode($page_callback_result);
  }

  ajax_footer();

}

function tripal_jbrowse_api_organism_load($organism_id) {
  return chado_query(TRIPAL_JBROWSE_API_QUERY_ORGANISM_BY_ID, array(':organism_id' => $organism_id))->fetchObject();
}

function tripal_jbrowse_api_callback_null() {
  return NULL;
}

function tripal_jbrowse_api_callback_datasets() {

  $results = chado_query(TRIPAL_JBROWSE_API_QUERY_ALL_ORGANISMS)->fetchAll(PDO::FETCH_ASSOC);

  $datasets = array();

  foreach ($results as $row) {

    $dataset = array(
      'name' => sprintf('%s %s (%s)', $row['genus'], $row['species'], $row['common_name']),
      'url' => '?data=' . $GLOBALS['base_url'] . '/api/jbrowse/' . $row['organism_id'],
    );

    $datasets[$row['organism_id']] = $dataset;

  }

  $data = array(
    'datasets' => $datasets,
  );

  return $data;

}

function tripal_jbrowse_api_callback_refseqs($organism) {

  $results = chado_query(TRIPAL_JBROWSE_API_QUERY_REFSEQ, array(':organism_id' => $organism->organism_id, ':sequence_type' => 'chromosome'))->fetchAll(PDO::FETCH_ASSOC);

  if (empty($results)) {
    $results = chado_query(TRIPAL_JBROWSE_API_QUERY_REFSEQ, array(':organism_id' => $organism->organism_id, ':sequence_type' => 'supercontig'))->fetchAll(PDO::FETCH_ASSOC);
  }

  $refseqs = array_map(function($row) {
    return array(
      'length' => (int) $row['seqlen'],
      'name' => $row['name'],
      'start' => 0,
      'end' => (int) $row['seqlen'],
    );
  }, $results);

  $data = $refseqs;

  return $data;

}

function tripal_jbrowse_api_callback_stats($organism) {
  return array('featureDensity' => 0.0001);
}

function tripal_jbrowse_api_callback_tracklist($organism) {

  $tracks = array();

  $tracks[] =  array(
    'category' => 'Assembly - ' . $organism->common_name,
    'useAsRefSeqStore' => TRUE,
    'label' => 'refseq',
    'key' => 'Reference Sequence',
    'type' => 'JBrowse/View/Track/Sequence',
    'storeClass' => 'JBrowse/Store/SeqFeature/REST',
    'baseUrl' => $GLOBALS['base_url'] . '/api/jbrowse/' . $organism->organism_id . '/',
    'query' => array(
      'sequence' => TRUE
    ),
  );

  $tracks[] = array(
    'category' => 'Genes',
    'label' => 'genes',
    'key' => $organism->common_name . ' gene models',
    'type' => 'JBrowse/View/Track/CanvasFeatures',
    'trackType' => 'JBrowse/View/Track/CanvasFeatures',
    'storeClass' => 'JBrowse/Store/SeqFeature/REST',
  );

  $tracks[] = array(
    'category' => 'Transcripts',
    'label' => 'transcripts',
    'transcriptType' => 'transcript',
    'key' => $organism->common_name . ' transcript models',
    'type' => 'JBrowse/View/Track/CanvasFeatures',
    'trackType' => 'JBrowse/View/Track/CanvasFeatures',
    'storeClass' => 'JBrowse/Store/SeqFeature/REST',
  );

  $other_tracks = module_invoke_all('jbrowse_tracks', $organism);

  $datasets = tripal_jbrowse_api_callback_datasets();

  $data = array(
    'dataset_id' => $organism->organism_id,
    'defaultTracks' => 'refseq,genes,transcripts',
    'names' => array(
      'type' => 'REST',
      'url' => $GLOBALS['base_url'] . '/api/jbrowse/' . $organism->organism_id . '/names',
    ),
    'refSeqs' => $GLOBALS['base_url'] . '/api/jbrowse/' . $organism->organism_id . '/refSeqs.json',
    'tracks' => array_merge($tracks, $other_tracks),
  ) + $datasets;

  $immutable_organism = clone $organism;
  drupal_alter('jbrowse_tracklist', $data, $immutable_organism);

  return $data;

}

function tripal_jbrowse_api_callback_names($organism) {

  $params = drupal_get_query_parameters();

  if (!(isset($params['equals']) || isset($params['startswith']))) {
    drupal_add_http_header('Status', '400 Bad Request');
    return NULL;
  }

  if (isset($params['equals'])) {
    $results = chado_query(TRIPAL_JBROWSE_API_QUERY_SIMPLE_FEATURE_QUERY_NAME_EQUALS, array(':organism_id' => $organism->organism_id, ':feature_name_query' => $params['equals']))->fetchAll(PDO::FETCH_ASSOC);
  } else {
    $results = chado_query(TRIPAL_JBROWSE_API_QUERY_SIMPLE_FEATURE_QUERY_NAME_LIKE, array(':organism_id' => $organism->organism_id, ':feature_name_query' => db_like($params['startswith']) .  '%'))->fetchAll(PDO::FETCH_ASSOC);
  }

  $matches = array_map(function($row) {
    return array(
      'name' => $row['feature_name'],
      'location' => array(
        'ref' => $row['feature_ref'],
        'start' => (int) $row['feature_start'],
        'end' => (int) $row['feature_end'],
      ),
      'objectName' => $row['feature_uniquename'],
    );
  }, $results);

  $data = $matches;

  return $data;

}

function tripal_jbrowse_api_callback_features($organism, $refseq) {

  $params = drupal_get_query_parameters();
  $start = (!empty($params['start'])) ? (int) $params['start'] : 0;
  $end = (!empty($params['end'])) ? (int) $params['end'] : 0;

  if ($end < $start) {
    drupal_add_http_header('Status', '400 Bad Request');
    return NULL;
  }

  if (!empty($params['sequence']) && $params['sequence'] === 'true') {
    return tripal_jbrowse_api_callback_features_sequence($organism, $refseq, $start, $end);
  } else {
    return tripal_jbrowse_api_callback_features_features($organism, $refseq, $start, $end);
  }

}

function tripal_jbrowse_api_callback_features_sequence($organism, $refseq, $start, $end) {

  $result = chado_query(TRIPAL_JBROWSE_API_QUERY_REFSEQ_SEQ, array(':organism_id' => $organism->organism_id, ':refseq' => $refseq, ':start' => $start, ':end' => $end - $start))->fetchAssoc();

  if (empty($result['seq'])) {
    drupal_add_http_header('Status', '400 Bad Request');
    return NULL;
  }

  $data = array();

  $data['features'][] = array(
    'start' => $start,
    'seq' => $result['seq'],
    'end' => $end,
  );

  return $data;

}

function tripal_jbrowse_api_callback_features_features($organism, $refseq, $start, $end) {

  $results = chado_query(TRIPAL_JBROWSE_API_QUERY_SIMPLE_FEATURE_QUERY_WITH_PARENT, array(':organism_id' => $organism->organism_id, ':refseq' => $refseq, ':start' => $start, ':end' => $end, ':soType' => 'gene'))->fetchAll(PDO::FETCH_ASSOC);

  $features = array();
  $genes = array();
  $subfeatures = array();

  foreach ($results as $row) {

    $feature_id = $row['xfeature_id'];
    $parent_id = $row['parent_id'];

    $feature = array(
      'type' => $row['feature_type'],
      'start'=> (int) $row['feature_fmin'],
      'end' => (int) $row['feature_fmax'],
      'uniqueID'=> $row['feature_uniquename'],
      'strand' => (int) $row['feature_strand'],
      'name' => (!empty($row['feature_name'])) ? $row['feature_name'] : '(unnamed)',
    );

    if ($feature['type'] === 'gene') {
      $feature['subfeatures'] = (!empty($genes[$feature_id])) ? $genes[$feature_id]['subfeatures'] : array();
      $genes[$feature_id] = $feature;
    } elseif ($feature['type'] === 'mRNA') {
      $genes[$parent_id]['subfeatures'][$feature_id] = $feature;
    } elseif ($feature['type'] === 'transcript') {
      $genes[$parent_id]['subfeatures'][$feature_id] = $feature;
    } elseif ($parent_id !== $feature_id) {
      $subfeatures[$parent_id][] = $feature;
    } else {
      $features[] = $feature;
    }

  }

  foreach ($genes as $gene_id => $gene_feature) {

    foreach ($gene_feature['subfeatures'] as $mrna_id => $mrna_feature) {
      if (!empty($subfeatures[$mrna_id])) {
        $gene_feature['subfeatures'][$mrna_id]['subfeatures'] = $subfeatures[$mrna_id];
      }
    }

    $gene_feature['subfeatures'] = array_values($gene_feature['subfeatures']);

    $features[] = $gene_feature;

  }

  $data = array(
    'features' => $features,
  );

  return $data;

}
