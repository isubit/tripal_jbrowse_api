<?php

require_once 'includes/tripal_jbrowse_api.queries.inc';

/**
 * Implements hook_permission().
 */
function tripal_jbrowse_api_permission() {
  return array(
    'use jbrowse api' => array(
      'title' => t('Use JBrowse API'),
      'description' => t('Allows the user to access to the JBrowse-compatible REST API to the Chado database.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tripal_jbrowse_api_menu() {

  $base = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('use jbrowse api'),
    'delivery callback' => 'tripal_jbrowse_api_json_output',
  );

  $items['api/jbrowse/%tripal_jbrowse_api_organism/refSeqs.json'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_refseqs',
    'page arguments' => array(2),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/stats/global'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_stats',
    'page arguments' => array(2),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/features/%'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_features',
    'page arguments' => array(2, 4),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/tracks.conf'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_tracks',
    'page arguments' => array(2),
  ) + $base;

  $items['api/jbrowse/%tripal_jbrowse_api_organism/trackList.json'] = array(
    'page callback' => 'tripal_jbrowse_api_callback_tracklist',
    'page arguments' => array(2),
  ) + $base;

  return $items;

}

function tripal_jbrowse_api_json_output($var = NULL) {

  drupal_page_is_cacheable(FALSE);

  drupal_add_http_header('Content-Type', 'application/json; charset=UTF-8');
  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  drupal_add_http_header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');

  if (isset($var)) {
    echo drupal_json_encode($var);
  }

  drupal_page_footer();

}

function tripal_jbrowse_api_organism_load($organism_common_name) {
  return chado_query(TRIPAL_JBROWSE_API_QUERY_ORGANISM_BY_COMMON_NAME, array(':organism_common_name' => $organism_common_name))->fetchObject();
}

function tripal_jbrowse_api_callback_refseqs($organism) {

  $results = chado_query(TRIPAL_JBROWSE_API_QUERY_REFSEQ, array(':organism_id' => $organism->organism_id, ':sequence_type' => 'chromosome'))->fetchAll(PDO::FETCH_ASSOC);

  if (empty($results)) {
    $results = chado_query(TRIPAL_JBROWSE_API_QUERY_REFSEQ, array(':organism_id' => $organism->organism_id, ':sequence_type' => 'supercontig'))->fetchAll(PDO::FETCH_ASSOC);
  }

  $refseqs = array_map(function($row) {
    return array(
      'length' => (int) $row['seqlen'],
      'name' => $row['name'],
      'start' => 0,
      'end' => (int) $row['seqlen'],
      'seqChunkSize' => 20000,
    );
  }, $results);

  $data = $refseqs;

  return $data;
  
}

function tripal_jbrowse_api_callback_stats($organism) {
  return array('featureDensity' => 0.01);
}

function tripal_jbrowse_api_callback_tracks($organism) {
  return NULL;
}

function tripal_jbrowse_api_callback_tracklist($organism) {

  $refseqs_tracks = array();

  $refseqs_tracks[] =  array(
    'useAsRefSeqStore' => TRUE,
    'label' => 'ref_seq',
    'key' => $organism->common_name . ' Reference Sequence',
    'type' => 'JBrowse/View/Track/Sequence',
    'storeClass' => 'JBrowse/Store/SeqFeature/REST',
    'baseUrl' => $GLOBALS['base_url'] . '/api/jbrowse/' . $organism->common_name . '/',
    'query' => array(
      'sequence' => TRUE
    ),
  );

  $results = chado_query(TRIPAL_JBROWSE_API_QUERY_SO_TYPE, array(':organism_id' => $organism->organism_id))->fetchAll(PDO::FETCH_ASSOC);

  $so_tracks = array_map(function($row) use($organism) {
    return array(
      'category' => 'Generic SO Type Tracks',
      'label' => $organism->common_name . '_' . $row['type'],
      'type' => 'JBrowse/View/Track/HTMLFeatures',
      'trackType' => 'JBrowse/View/Track/HTMLFeatures',
      'key' => $row['type'],
      'query' => array(
        'soType' => $row['type']
      ),
      'regionFeatureDensities' => TRUE,
      'storeClass' => 'JBrowse/Store/SeqFeature/REST',
    );
  }, $results);

  $other_tracks = module_invoke_all('jbrowse_tracks', $organism);

  $data = array(
    'refSeqs' => $GLOBALS['base_url'] . '/api/jbrowse/' . $organism->common_name . '/refSeqs.json',
//    'names' => array(
//      'type' => 'REST',
//      'url' => $GLOBALS['base_url'] . '/api/jbrowse/names',
//    ),
    'tracks' => array_merge($refseqs_tracks, $so_tracks, $other_tracks),
  );

  drupal_alter('jbrowse_tracklist', $data, clone $organism);

  return $data;
  
}

function tripal_jbrowse_api_callback_features($organism, $refseq) {

  $params = drupal_get_query_parameters();
  $start = (!empty($params['start'])) ? (int) $params['start'] : 0;
  $end = (!empty($params['end'])) ? (int) $params['end'] : 0;

  if ($end < $start) {
    drupal_add_http_header('Status', '400 Bad Request');
    return NULL;
  }

  if (!empty($params['sequence']) && $params['sequence'] === 'true') {
    return tripal_jbrowse_api_callback_features_sequence($organism, $refseq, $start, $end);
  } else {
    return tripal_jbrowse_api_callback_features_features($organism, $refseq, $start, $end);
  }

}

function tripal_jbrowse_api_callback_features_sequence($organism, $refseq, $start, $end) {
  
  $result = chado_query(TRIPAL_JBROWSE_API_QUERY_REFSEQ_SEQ, array(':organism_id' => $organism->organism_id, ':refseq' => $refseq, ':start' => $start, ':end' => $end - $start))->fetchAssoc();

  if (empty($result['seq'])) {
    drupal_add_http_header('Status', '400 Bad Request');
    return NULL;
  }

  $data = array();

  $data['features'][] = array(
    'start' => $start,
    'seq' => $result['seq'],
    'end' => $end,
  );

  return $data;

}

function tripal_jbrowse_api_callback_features_features($organism, $refseq, $start, $end) {

  $params = drupal_get_query_parameters();

  if (empty($params['soType'])) {
    drupal_add_http_header('Status', '400 Bad Request');
    return NULL;
  }

  $so_type = $params['soType'];

  $results = chado_query(TRIPAL_JBROWSE_API_QUERY_SIMPLE_FEATURE_QUERY_WITH_PARENT, array(':organism_id' => $organism->organism_id, ':refseq' => $refseq, ':start' => $start, ':end' => $end, ':soType' => $so_type))->fetchAll(PDO::FETCH_ASSOC);

  $features = array();

  foreach ($results as $row) {

    $feature = array(
      'type' => $row['feature_type'],
      'start'=> (int) $row['feature_fmin'],
      'end' => (int) $row['feature_fmax'],
      'strand'=> (int) $row['feature_strand'],
      'name' => (!empty($row['feature_name'])) ? $row['feature_name'] : '(unnamed)',
      'uniqueID'=> $row['feature_uniquename'],
      'score' => 0,
      'subfeatures' => array(),
    );

    if ($feature['type'] === $so_type) {
      if (!empty($features[$row['xfeature_id']]['subfeatures'])) {
        $feature['subfeatures'] = $features[$row['xfeature_id']]['subfeatures'];
      }
      $features[$row['xfeature_id']] = $feature;
    } else {
      $features[$row['parent_id']]['subfeatures'][] = $feature;
    }

  }

  $data = array();

  $data['features'] = array_values($features);

  return $data;

}
